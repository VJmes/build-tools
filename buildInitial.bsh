#!/usr/bin/env bash
# -------------------------------------------------
#
#   buildInitial.bsh - A very basic, flat-file build script  
#	which performs the bare-minimum Rocky or Alpine build.
#
#           Written: James Varoutsos
#       Date: 05-Sep-2024        Version: 2.0
#
#   1.0 - Initial
#	1.1	- Validated for Centos 8
#	1.2 - Updated repository names + minor tweaks
#	1.3 - Dropped Ubuntu + added Alpine
#   2.0 - Minor refactor + removed private code
#
#   Useage:
#		buildInitial.bsh [hostname] [username] <timezone>
#
# -------------------------------------------------

set -o errexit		# Exit if any commands below fail

# Defaults
TMZN="Australia/Sydney";				# Default timezone
GHDOTS="nix-dotfiles";					# Dotfiles repository
GHSCPTS="usr-scripts";					# User scripts repository
DEPS="git sysstat rsync wget tar vim tmux unzip lvm2 telegraf xfsprogs"	# Default apps

[[ "$(id -u)" != 0 ]] && { echo "[ERROR] Not run as root."; exit 1; }	# Run as root
[[ -z "$1" ]] && { echo "[ERROR] No hostname provided."; exit 3; }		# Hostname
[[ -z "$2" ]] && { echo "[ERROR] No username provided."; exit 4; }		# Username
[[ -n "$3" ]] || { TMZN=$3; } 	# Timezone

echo "$1" > /etc/hostname
rm -rf /etc/localtime && ln -s /usr/share/zoneinfo/"${TMZN}" /etc/localtime

# For Fedora-like distributions
if type dnf &> /dev/null; then
	grep -q "VMware" /sys/devices/virtual/dmi/id/sys_vendor && \
		{ DEPS="${DEPS} open-vm-tools"; }
	DEPS="${DEPS} open-vm-tools epel-release bind-utils"
	echo -e "[INFO] Installing $DEPS" && dnf -qy install $DEPS
# For Alpine distributions
elif type apk &> /dev/null; then
	grep -q "VMware" /sys/devices/virtual/dmi/id/sys_vendor && \
		{ DEPS="${DEPS} open-vm-tools open-vm-tools-guestinfo open-vm-tools-deploypkg"; }
	sed -i 's/^#//g' /etc/apk/repositories && apk update
	DEPS="${DEPS} sudo coreutils date curl wget git xz shadow grep util-linux-misc openssh-sftp-server rsyslog"
	echo -e "[INFO] Installing $DEPS" && apk -q add $DEPS
else
	echo "[ERROR] No compatible package manager found." && exit 5;
fi

# Basic user creation
if id "$2" &> /dev/null; then
	echo "[WARN] User already exists, skipping user-creation."
	usermod --shell /bin/bash "$2"
else
	echo -e "[INFO] Creating the ${2} user."
	useradd -ms /bin/bash -G users "$2" &> /dev/null
	echo -e "[INFO] User $2 created, please set a password"
	passwd "$2"
fi
mkdir -p /home/"${2}"/.ssh || exit 5;
ssh-keygen -qt ed25519 -f "/home/${2}/.ssh/${2}@${1}" -N ''
cat "/home/${2}/.ssh/${2}@${1}".pub > /home/"${2}"/.ssh/authorized_keys
echo -e "[INFO] Write down/store private key:" && cat "/home/${2}/.ssh/${2}@${1}"

sudoBins="/usr/bin/mkdir, /usr/bin/reboot"
type systemctl &> /dev/null && syclSudoBins=", /usr/bin/systemctl, /usr/bin/journalctl"
echo -e "$2\tALL=(ALL)\tALL\n$2\tALL=(ALL)\tNOPASSWD:${sudoBins}${syclSudoBins}" >> /etc/sudoers.d/"$2"
chmod 440 /etc/sudoers.d/"$2"

echo -e "[INFO] Cloning latest Linux profile"
git clone --q --recurse-submodules "https://github.com/vjmes/${GHDOTS}.git" /tmp/dotfiles && \
	rm -rf /tmp/dotfiles/{.git,.gitignore,.gitmodules,README.md,.vscode}
# Copy profile to root user
rsync -qav --progress "/tmp/dotfiles/" "/root/" && ln -s ~/.bashrc ~/.profile
# Copy profile to custom user (If exists)
[ -d "/home/$2" ] && { 
rsync -qav --progress "/tmp/dotfiles/" "/home/$2/"; 
	ln -s /home/"$2"/.bashrc /home/"$2"/.profile; chown -R "$2:users" "/home/$2/"; }
# Copy profile to rocky user (If exists)
[ -d "/home/rocky" ] && { 
	rsync -qav --progress "/tmp/dotfiles/" "/home/rocky/"; 
	ln -s /home/rocky/.bashrc /home/rocky/.profile; chown -R rocky:rocky /home/rocky/; }

echo -e "[INFO] Cloning Linux toolkit"
git clone --q --recurse-submodules "https://github.com/vjmes/${GHSCPTS}.git" /usr/scripts && \
	rm -rf rm -rf /usr/scripts/{.git,.gitignore,.gitmodules,README.md,.vscode}
find /usr/scripts/ -type f -exec chmod 744 {} +

echo -e "[INFO] Cloning this Build tools repository"
git clone --q "https://github.com/vjmes/build-tools.git" /tmp/build	&& \
	rm -rf rm -rf /tmp/build/{.git,.gitignore,.gitmodules,README.md,.vscode}
find /tmp/build/ -type f -exec chmod 744 {} +

# Flush & Set MOTD from local copy
[ -s /etc/motd ] && { : > /etc/motd; }
cp -rp /tmp/build/motd.sh /etc/profile.d/

# Fetch environment configutrations if hostname is set as part of a domain
if [ -n ${HOSTNAME#*.} ]; then
	echo -ne "[INFO] Environment '${HOSTNAME#*.}' detected from hostname - "
	echo -e "Cloning domain-specific configurations repository"
	git clone --q "https://${2}@github.com/${2}/${HOSTNAME#*.}-confs.git" /tmp/confs && \
	rm -rf rm -rf /tmp/build/{.git,.gitignore,.gitmodules,README.md,.vscode}
fi

# Copy common configuration items
if [ -d "/tmp/confs" ]; then
	[ -f "/tmp/confs/sshd.conf" ] && { mv "/tmp/confs/sshd.conf" "/etc/ssh/sshd_config"; }
	[ -f "/tmp/confs/chrony.conf" ] && { mv "/tmp/confs/chrony.conf" "/etc/chrony.conf"; }
	[ -f "/tmp/confs/resolv.conf" ] && { mv "/tmp/confs/resolv.conf" "/etc/resolv.conf"; }
	[ -f "/tmp/confs/rsyslog.conf" ] && { mv "/tmp/confs/rsyslog.conf" "/etc/rsyslog.conf"; }
	[ -d "/tmp/confs/scripts" ] && { 
		find /tmp/confs/scripts/ -type f -exec chmod 744 {} +;
		mv -r "/tmp/confs/scripts/" "/usr/scripts"; 
	}
fi

# Distro-specific actions
if grep -q "rocky" /etc/os-release; then
	rm -f /etc/issue.d/cockpit.issue /etc/motd.d/cockpit 	# Remove cockpit
elif grep -q "alpine" /etc/os-release; then
	mv -f /etc/chrony.conf /etc/chrony/chrony.conf && rc-service chronyd restart
	usermod --shell /bin/bash root						# Set bash as default
	rc-update del syslog boot && rc-service syslog stop # Disable default syslog
	rc-update add rsyslog boot			# Enable rsyslog
	rc-update add open-vm-tools boot	# Enable open-vm-tools
fi

rm -rf /tmp/dotfiles && echo -e "[GOOD] Finished inital build"
echo -e "[INFO] Ensure to remove temporary /tmp/build folder once complete"